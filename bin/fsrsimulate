#!/usr/bin/env python3
# -*- coding:utf-8 -*-

from IPython.terminal.embed import InteractiveShellEmbed
from fsrtools.simulate_tools import CommandManager
from fsrtools.simulate_tools import operate_experiments
from fsrtools.simulate_tools import log_check
from fsrtools.util import colors
from fsrtools.util import color_print

def main():
    import argparse
    parser = argparse.ArgumentParser(description='Simulation Management Script',add_help=True)

    parser.add_argument('-j','--json',action='store',default=None,type=str,help='input parameter json file')
    parser.add_argument('-t','--test',action='store_true',help='test mode option')
    parser.add_argument('--log',action='store',metavar='DIRECTORY',type=str,help='directory input : all log plot')
    parser.add_argument('--cout',action='store_true',help='out calculation')
    parser.add_argument('-lf','--log_file',action='store', default='log.dat',type=str,help='log file name : default "log.dat" or "log_test.dat" in test mode')
    parser.add_argument('--off_structured_output',action='store_true',help='structured output option')
    parser.add_argument('--ignore_abnormal_termination',action='store_true',help='ignoring abnormal termination option')
    parser.add_argument('--set_commands',action='store_true',help='set command mode : via IPython')

    args = vars(parser.parse_args())
    if(args['set_commands']):
        print('set commands mode')
        fsrsimulate = CommandManager()
        fsrsimulate.command_list()
        itembed = InteractiveShellEmbed()
        color_print('[Interactive Shell Mode]','GREEN')
        color_print('[ATTENTION]','GREEN')
        print(' [All configuration should be set by "fsrsimulate"]')
        print(' [You can see help by "fsrsimilate.help()"]')
        color_print('[Start IPython]','GREEN')
        itembed()
        color_print('[End Interactive Shell]','GREEN')
    elif(args['log'] != None):
        target_directory = args['log']
        log_check(target_directory)
    else:
        fsrsimulate = CommandManager()
        command_data = fsrsimulate.command_data
        structured_output_flag = not args['off_structured_output']
        ignore_abnormal_termination = args['ignore_abnormal_termination']
        operate_experiments(
                            parameter_file=args['json'],
                            log_file=args['log_file'],
                            cout_tag=args['cout'],
                            test_mode=args['test'],
                            command_data=command_data,
                            structured_output=structured_output_flag,
                            ignore_abnormal_termination=ignore_abnormal_termination
                            )


if __name__ == '__main__':
    main()

